list集合排序
list集合的两种排序方法
1.Comparable自然规则排序

//在自定义类Student里面实现Comparable接口，并重写抽象方法compareTo(Student o);
//Collections.sort(集合);

public static void main(String[] args) {

List<Integer> nums = new ArrayList<Integer>();

nums.add(3);

nums.add(5);

nums.add(1);

nums.add(0);

Collections.sort(nums);

}

输出结果:[0,1,3,5]

 

集合里面是对象的话：

List<ChildDto> childDtos = getChildDtos(list);
Collections.sort(childDtos, new Comparator<ChildDto>(){
    @Override
    public int compare(ChildDto o1, ChildDto o2) {
        if(o1.getUserId() > o2.getUserId()){ 　　// “>”号是正序  “<”是倒序  想要根据谁排序 就用对象get出来
            return 1;
        }
        if(o1.getUserId()==o2.getUserId()){
            return 0;
        }
        return -1;
    }
});


封装对象：
@Data
public class ChildDto implements Serializable {
    /**
     * 用户名
     */
    private String name;
    /**
     * 用户名
     */
    private String fullname;
    /**
     * 头像
     */
    private String avatar;
    /**
     * 名称
     */
    private long userId;
    /**
     * 是否是选定孩子 1是  其他不是
     */
    private String selected;
    /**
     * 监护人类型
     */
    private long guardianType;
    /**
     * 监护人名称
     */
    private String guardianName;

}
根据名称排序，比如数据是：学生2、学生4、学生1、学生3
输出结果:

正序[1,2,3,4]

倒序[4,3,2,1]










lambda表达式中冒号的用法：
java8 :: 用法 （JDK8 双冒号用法）
特性
jdk8中使用了::的用法。就是把方法当做参数传到stream内部，使stream的每个元素都传入到该方法里面执行一下，双冒号运算就是Java中的[方法引用],[方法引用]的格式是：

  类名：：方法名 
注意此处没有（）。

案例：
表达式：

person -> person.getAge();
使用双冒号：

Person：：getAge
表达式：

new HashMap<>()
使用双冒号：

HsahMap :: new
部分代码案例
未使用双冒号

public class MyTest {
    public static void main(String[] args) {
        List<String> a1 = Arrays.asList("a", "b", "c");

        for (String a : a1) {
            printValur(a);
        };

        a1.forEach(x -> MyTest.printValur(x));


    }

    public static void printValur(String str) {
        System.out.println("print value : " + str);
    }
}
使用后

     a1.forEach(MyTest::printValur);

        Consumer<String> consumer = MyTest::printValur;
        a1.forEach(x -> consumer.accept(x));
未使用双冒号：

     List<String> list = a1.stream().map(x -> x.toUpperCase()).collect(Collectors.toList());
        System.out.println(list.toString());
使用双冒号：


        ArrayList<String> collect = a1.stream().map(String::toUpperCase).collect(Collectors.toCollection(ArrayList::new));
        System.out.println(collect.toString());

