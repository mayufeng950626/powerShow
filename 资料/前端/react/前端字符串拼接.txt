在 JavaScript 中，使用字符串连接有 3 种方式。
使用加号运算符
连接字符串最简便的方法是使用加号运算符。
示例1
下面代码使用加号运算符连接两个字符串。
var s1 = "abc" , s2 = "def";
console.log(s1 + s2);  //返回字符串“abcdef”
使用concat()方法
使用字符串 concat() 方法可以把多个参数添加到指定字符串的尾部。该方法的参数类型和个数没有限制，它会把所有参数都转换为字符串，然后按顺序连接到当前字符串的尾部最后返回连接后的字符串。
示例2
下面代码使用 concat() 方法把多个字符串连接在一起。
var s1 = "abc";
var s2 = s1.concat("d" , "e" , "f");  //调用concat()连接字符串
console.log(s2);  //返回字符串“abcdef”
concat() 方法不会修改原字符串的值，与数组的 concat() 方法操作相似。
使用join()方法
在特定的操作环境中，也可以借助数组的 join() 方法来连接字符串，如 HTML 字符串输出等。
示例3
下面代码演示了如何借助数组的方法来连接字符串。
var s = "JavaScript" , a = [];
for (var i = 0; i < 1000; i ++) {
    a.push(s);
var str = a.join("");
a = null;
document.write(str);
在上面示例中，使用 for 语句把 1000 个 “JavaScript”字符串装入数组，然后调用数组的 join() 方法把元素的值连接成一个长长的字符串。使用完毕应该立即清除数组，避免占用系统资源。

在传统浏览器中，使用数组的 join() 方法连接超大字符串时，速度会很快，是推荐的最佳方法。随着现代浏览器优化了加号运算符的算法，使用加号运算符连接字符串速度也非常快，同时使用简单。一般推荐使用加号运算符来连接字符串，而 concat() 和 join() 方法可以用在特定的代码环境中。