函数式变成，可以将函数作为一个传参作为传递
可以理解为一种匿名函数的代替

lambda表达式的形式
(parameters) -> expression
(parameters) -> {statement;}

形式一： 没有参数
() -> System.out.println("hello world");

形式二： 只有一个参数
name -> System.out.println("hello world from" + name + "!");

形式三： 没有参数，但是逻辑复杂
() -> {
	System.out.println("hello");
	System.out.println("world");
}

形式四： 有两个参数的方法
BinaryOperator<Long> functionAdd = (x,y) -> x + y;
Long result = functionAff.apply(1L,2L);



函数式接口：
	接口中只有一个抽象方法
	/**
	 * Sku选择谓词接口
	 */
	public interface SkuPredicate{
		/**
		*选择判断标准
		*@param sku
		*@return
		*/
		boolean test(Sku sku);
		
	}

	
public class Version6Test {
	@Test
	public void filterSkus() {
		List<Sku> cartSkuList = CartService.getCartSkuList();
		// 过滤商品单价大于1000的商品
		LIst<Sku> result = CartService.filterSkus(cartSkuList,(Sku sku) -> sku.getSkuPrice() >1000);
		System.out.println(JSON.toJSONString(result, true));
	}
}


java8的函数式接口注解： @FunctionInterface



函数式接口的抽象方法签名：函数描述符







Filter 是过滤器，也可以当查询方法使用

EmployeeTestCase.java

package com.example.demo;
 
import lombok.extern.log4j.Log4j2;
import org.junit.Test;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
 
@Log4j2
public class EmployeeTestCase extends BaseTest{
    @Test
    public void filter() {
        //获取包含Alex员工列表
        List<Employee> employeeIs1 = list.stream().filter(e -> e.getName().contains("Alex")).collect(Collectors.toList());
        assertTrue(null != employeeIs1 && employeeIs1.get(0).getId() == 1l);
        //获取包含Jacks名称的首位员工
        Optional<Employee> employeeJaskFirst2 = list.stream().filter(e -> e.getName().contains("Jack")).findFirst();
        assertEquals(employeeJaskFirst2.get().getId(), 3);
        //获取所有薪酬为1500的员工
        List<Employee> employees1350 = list.stream().filter(employee -> employee.getSalary() == 1500).peek(System.out::println).collect(Collectors.toList());
        assertEquals(2, employees1350.size());
    }
}

BaseTest.java
    package com.example.demo;

    import java.util.Arrays;
    import java.util.List;

    public class BaseTest {
        protected static final List<Employee> list = Arrays.asList(
                new Employee(1, "Alex", 1000),
                new Employee(2, "Michael", 2000),
                new Employee(3, "Jack", 1500),
                new Employee(4, "Owen", 1500),
                new Employee(5, "Denny", 2000));

        protected static final List<List<Employee>> listFlat = Arrays.asList(
                Arrays.asList(new Employee(1, "Alex", 1000),
                              new Employee(2, "Michael", 2000)),
                Arrays.asList(new Employee(3, "Jack", 1500),
                              new Employee(4, "Owen", 1500)),
                Arrays.asList(new Employee(5, "Denny", 2000)));
    }













