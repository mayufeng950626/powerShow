synchronized是java中的关键字，是一种同步锁，它修饰的对象有以下几种：
	1.修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象；
	2.修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象
	
	
	
	
	虽然可以使用synchronized来定义方法，但synchronized并不属于方法定义的一部分，因此，synchronized关键字不能被继承。如果在父类的某个方法中使用了synchronized关键字，而在子类中覆盖了这个方法，在子类中的这个方法默认情况下并不是同步的
，必须显式的在子类的这个方法中加上synchronized关键字才可以，当然还可以在子类方法中调用父类中相应的方法，这样虽然子类中的方法不是同步的，但是子类调用了父类的同步方法。




案例： 三个售票员  卖出30张票
	/**
 * 资源类
 */
class Ticket {
    // 票数
    private int num = 30;
    // 操作方法: 卖票
    public synchronized void sale(){
        // 判断是否有票
        if (num>0){
            System.out.println(Thread.currentThread().getName()+":卖出"+(num--)+"剩下："+num);
        }
    }
}
/**
 * @author Admin
 */
public class SaleTicket{
    public static void main(String[] args) {
        // 创建Ticket对象
        Ticket ticket = new Ticket();
        // 创建三个线程
        new Thread(new Runnable() {
            @Override
            public void run() {
                // 调用操作方法
                for(int i = 0; i < 40; i++) {
                    ticket.sale();
                }
            }
        },"AA").start();
        new Thread(new Runnable() {
            @Override
            public void run() {
                // 调用操作方法
                for(int i = 0; i < 40; i++) {
                    ticket.sale();
                }
            }
        },"BB").start();
        new Thread(new Runnable() {
            @Override
            public void run() {
                // 调用操作方法
                for(int i = 0; i < 40; i++) {
                    ticket.sale();
                }
            }
        },"CC").start();
    }
}